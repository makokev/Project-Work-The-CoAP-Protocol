/* Generated by AN DISI Unibo */ 
package it.unibo.client_actor;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
public abstract class AbstractClient_actor extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractClient_actor(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/client_actor/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/client_actor/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("running",running);
	    	stateTab.put("stopping",stopping);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "client_actor tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"radarCoapClient: start.\"";
	    	println( temporaryStr );  
	    	it.unibo.radar.radarGUIController.startGUI( myself  );
	    	//switchTo running
	        switchToPlanAsNextState(pr, myselfName, "client_actor_"+myselfName, 
	              "running",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun running = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_running",0);
	     pr.incNumIter(); 	
	    	String myselfName = "running";  
	    	//bbb
	     msgTransition( pr,myselfName,"client_actor_"+myselfName,false,
	          new StateFun[]{stateTab.get("stopping") }, 
	          new String[]{"true","E","stopMessage" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_running){  
	    	 println( getName() + " plan=running WARNING:" + e_running.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//running
	    
	    StateFun stopping = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stopping",-1);
	    	String myselfName = "stopping";  
	    	temporaryStr = "\"radarCoapClient: stop.\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"client_actor_"+myselfName,false,false);
	    }catch(Exception e_stopping){  
	    	 println( getName() + " plan=stopping WARNING:" + e_stopping.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stopping
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
