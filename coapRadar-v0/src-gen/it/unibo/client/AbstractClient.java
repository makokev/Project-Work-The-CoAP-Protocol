/* Generated by AN DISI Unibo */ 
package it.unibo.client;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractClient extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractClient(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/client/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/client/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("getInitialValue",getInitialValue);
	    	stateTab.put("receiveInitialValue",receiveInitialValue);
	    	stateTab.put("sendingMessage",sendingMessage);
	    	stateTab.put("receiveValue",receiveValue);
	    	stateTab.put("clientStop",clientStop);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "client tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"client: start.\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "init";
	    	if( ! aar.getGoon() ) return ;
	    	//switchTo getInitialValue
	        switchToPlanAsNextState(pr, myselfName, "client_"+myselfName, 
	              "getInitialValue",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun getInitialValue = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("getInitialValue",-1);
	    	String myselfName = "getInitialValue";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"getValue","getValue", guardVars ).toString();
	    	sendMsg("getValue","server", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"client: Emitted GET.\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"client_"+myselfName,false,
	          new StateFun[]{stateTab.get("receiveInitialValue") }, 
	          new String[]{"true","M","sendValue" },
	          360000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_getInitialValue){  
	    	 println( getName() + " plan=getInitialValue WARNING:" + e_getInitialValue.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//getInitialValue
	    
	    StateFun receiveInitialValue = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("receiveInitialValue",-1);
	    	String myselfName = "receiveInitialValue";  
	    	temporaryStr = "\"client: Response GET received.\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"client: Distance = \"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("sendValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Discance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Distance";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Discance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	temporaryStr = "\"client: Angle = \"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("sendValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Discance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Angle";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Discance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	//switchTo sendingMessage
	        switchToPlanAsNextState(pr, myselfName, "client_"+myselfName, 
	              "sendingMessage",false, false, null); 
	    }catch(Exception e_receiveInitialValue){  
	    	 println( getName() + " plan=receiveInitialValue WARNING:" + e_receiveInitialValue.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//receiveInitialValue
	    
	    StateFun sendingMessage = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("sendingMessage",-1);
	    	String myselfName = "sendingMessage";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"value(Distance,Angle)","value(45,90)", guardVars ).toString();
	    	sendMsg("putValue","server", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"client: Emitted PUT: value(45,90).\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"client: Verifying update...\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"getValue","getValue", guardVars ).toString();
	    	sendMsg("getValue","server", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"client_"+myselfName,false,
	          new StateFun[]{stateTab.get("receiveValue") }, 
	          new String[]{"true","M","sendValue" },
	          360000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_sendingMessage){  
	    	 println( getName() + " plan=sendingMessage WARNING:" + e_sendingMessage.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//sendingMessage
	    
	    StateFun receiveValue = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("receiveValue",-1);
	    	String myselfName = "receiveValue";  
	    	temporaryStr = "\"client: Response GET received.\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"client: Distance = \"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("sendValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Discance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Distance";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Discance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	temporaryStr = "\"client: Angle = \"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("sendValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Discance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Angle";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Discance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	//switchTo clientStop
	        switchToPlanAsNextState(pr, myselfName, "client_"+myselfName, 
	              "clientStop",false, false, null); 
	    }catch(Exception e_receiveValue){  
	    	 println( getName() + " plan=receiveValue WARNING:" + e_receiveValue.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//receiveValue
	    
	    StateFun clientStop = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("clientStop",-1);
	    	String myselfName = "clientStop";  
	    	temporaryStr = "\"client: Client stopped.\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"client_"+myselfName,false,false);
	    }catch(Exception e_clientStop){  
	    	 println( getName() + " plan=clientStop WARNING:" + e_clientStop.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//clientStop
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
