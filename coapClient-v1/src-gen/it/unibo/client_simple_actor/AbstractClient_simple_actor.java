/* Generated by AN DISI Unibo */ 
package it.unibo.client_simple_actor;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractClient_simple_actor extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractClient_simple_actor(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/client_simple_actor/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/client_simple_actor/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("putValue",putValue);
	    	stateTab.put("getValue",getValue);
	    	stateTab.put("printValue",printValue);
	    	stateTab.put("stopping",stopping);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "client_simple_actor tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"radarCoapClientSimple start.\"";
	    	println( temporaryStr );  
	    	it.unibo.radar.coap.client.coapRadarClientSimple.initClient( myself  );
	    	//switchTo putValue
	        switchToPlanAsNextState(pr, myselfName, "client_simple_actor_"+myselfName, 
	              "putValue",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun putValue = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("putValue",-1);
	    	String myselfName = "putValue";  
	    	temporaryStr = "\"PUT\"";
	    	println( temporaryStr );  
	    	it.unibo.radar.coap.client.coapRadarClientSimple.putResourceValue( myself ,"50", "40"  );
	    	//switchTo getValue
	        switchToPlanAsNextState(pr, myselfName, "client_simple_actor_"+myselfName, 
	              "getValue",false, false, null); 
	    }catch(Exception e_putValue){  
	    	 println( getName() + " plan=putValue WARNING:" + e_putValue.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//putValue
	    
	    StateFun getValue = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("getValue",-1);
	    	String myselfName = "getValue";  
	    	temporaryStr = "\"GET\"";
	    	println( temporaryStr );  
	    	it.unibo.radar.coap.client.coapRadarClientSimple.getResourceValue( myself  );
	    	//bbb
	     msgTransition( pr,myselfName,"client_simple_actor_"+myselfName,true,
	          new StateFun[]{stateTab.get("printValue") }, 
	          new String[]{"true","M","value" },
	          2000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_getValue){  
	    	 println( getName() + " plan=getValue WARNING:" + e_getValue.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//getValue
	    
	    StateFun printValue = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("printValue",-1);
	    	String myselfName = "printValue";  
	    	temporaryStr = "\"PRINT VALUE:\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("value") && 
	    		pengine.unify(curT, Term.createTerm("value(Distance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Distance";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Distance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("value") && 
	    		pengine.unify(curT, Term.createTerm("value(Distance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Angle";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Distance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"client_simple_actor_"+myselfName,false,false);
	    }catch(Exception e_printValue){  
	    	 println( getName() + " plan=printValue WARNING:" + e_printValue.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//printValue
	    
	    StateFun stopping = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stopping",-1);
	    	String myselfName = "stopping";  
	    	temporaryStr = "\"radarCoapClient stop.\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"client_simple_actor_"+myselfName,false,false);
	    }catch(Exception e_stopping){  
	    	 println( getName() + " plan=stopping WARNING:" + e_stopping.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stopping
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
