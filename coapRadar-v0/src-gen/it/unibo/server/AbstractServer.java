/* Generated by AN DISI Unibo */ 
package it.unibo.server;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import alice.tuprolog.Term;
public abstract class AbstractServer extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractServer(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/server/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/server/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitingMessage",waitingMessage);
	    	stateTab.put("putReceived",putReceived);
	    	stateTab.put("getReceived",getReceived);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "server tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"server: start.\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "p(Distance,Angle)","p(0,0)", guardVars ).toString();
	    	emit( "polar", temporaryStr );
	    	temporaryStr = "distance(0)";
	    	addRule( temporaryStr );  
	    	temporaryStr = "angle(0)";
	    	addRule( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "init";
	    	if( ! aar.getGoon() ) return ;
	    	//switchTo waitingMessage
	        switchToPlanAsNextState(pr, myselfName, "server_"+myselfName, 
	              "waitingMessage",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitingMessage = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitingMessage",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitingMessage";  
	    	temporaryStr = "\"server: Waiting message...\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"server_"+myselfName,false,
	          new StateFun[]{stateTab.get("putReceived"), stateTab.get("getReceived") }, 
	          new String[]{"true","M","putValue", "true","M","getValue" },
	          360000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitingMessage){  
	    	 println( getName() + " plan=waitingMessage WARNING:" + e_waitingMessage.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitingMessage
	    
	    StateFun putReceived = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("putReceived",-1);
	    	String myselfName = "putReceived";  
	    	temporaryStr = "\"server: Put received.\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"server: Distance = \"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("putValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Distance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Distance";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Distance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	temporaryStr = "\"server: Angle = \"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("putValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Distance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "Angle";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("value(Distance,Angle)"), 
	    		                    Term.createTerm("value(Distance,Angle)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	temporaryStr = "distance(_)";
	    	removeRule( temporaryStr );  
	    	temporaryStr = "angle(_)";
	    	removeRule( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("putValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Distance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="distance(Distance)";
	    		/* AddRule */
	    		parg = updateVars(Term.createTerm("value(Distance,Angle)"),  Term.createTerm("value(Distance,Angle)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) addRule(parg);	    		  					
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("putValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Distance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="angle(Angle)";
	    		/* AddRule */
	    		parg = updateVars(Term.createTerm("value(Distance,Angle)"),  Term.createTerm("value(Distance,Angle)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) addRule(parg);	    		  					
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("value(Distance,Angle)");
	    	if( currentMessage != null && currentMessage.msgId().equals("putValue") && 
	    		pengine.unify(curT, Term.createTerm("value(Distance,Angle)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="p(Distance,Angle)";
	    		/* RaiseEvent */
	    		parg = updateVars(Term.createTerm("value(Distance,Angle)"),  Term.createTerm("value(Distance,Angle)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) emit( "polar", parg );
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"server_"+myselfName,false,true);
	    }catch(Exception e_putReceived){  
	    	 println( getName() + " plan=putReceived WARNING:" + e_putReceived.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//putReceived
	    
	    StateFun getReceived = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("getReceived",-1);
	    	String myselfName = "getReceived";  
	    	temporaryStr = "\"server: Get received.\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?point(X,Y)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"value(Discance,Angle)","value(X,Y)", guardVars ).toString();
	    	sendMsg("sendValue","client", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	temporaryStr = "\"server: Send value:\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"server: Distance = \"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?point(X,Y)" )) != null ){
	    	temporaryStr = "X";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	temporaryStr = "\"server: Angle = \"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?point(X,Y)" )) != null ){
	    	temporaryStr = "Y";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"server_"+myselfName,false,true);
	    }catch(Exception e_getReceived){  
	    	 println( getName() + " plan=getReceived WARNING:" + e_getReceived.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//getReceived
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
